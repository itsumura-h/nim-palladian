/* Generated by the Nim Compiler v1.6.10 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};

function makeNimstrLit(c_33556801) {
      var result = [];
  for (var i = 0; i < c_33556801.length; ++i) {
    result[i] = c_33556801.charCodeAt(i);
  }
  return result;
  

  
}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557140, src_33557141, ti_33557142) {
  var result_33557151 = null;

    switch (ti_33557142.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557131(ti_33557142))) {
      result_33557151 = src_33557141;
      }
      else {
        result_33557151 = [src_33557141[0], src_33557141[1]];
      }
      
      break;
    case 19:
            if (dest_33557140 === null || dest_33557140 === undefined) {
        dest_33557140 = {};
      }
      else {
        for (var key in dest_33557140) { delete dest_33557140[key]; }
      }
      for (var key in src_33557141) { dest_33557140[key] = src_33557141[key]; }
      result_33557151 = dest_33557140;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557142.base == null))) {
      result_33557151 = nimCopy(dest_33557140, src_33557141, ti_33557142.base);
      }
      else {
      if ((ti_33557142.kind == 17)) {
      result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {m_type: ti_33557142} : dest_33557140;
      }
      else {
        result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {} : dest_33557140;
      }
      }
      nimCopyAux(result_33557151, src_33557141, ti_33557142.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557141 === null) {
        result_33557151 = null;
      }
      else {
        if (dest_33557140 === null || dest_33557140 === undefined || dest_33557140.length != src_33557141.length) {
          dest_33557140 = new Array(src_33557141.length);
        }
        result_33557151 = dest_33557140;
        for (var i = 0; i < src_33557141.length; ++i) {
          result_33557151[i] = nimCopy(result_33557151[i], src_33557141[i], ti_33557142.base);
        }
      }
    
      break;
    case 28:
            if (src_33557141 !== null) {
        result_33557151 = src_33557141.slice(0);
      }
    
      break;
    default: 
      result_33557151 = src_33557141;
      break;
    }

  return result_33557151;

}

function toJSStr(s_33556807) {
                    var Temporary5;
            var Temporary7;

  var result_33556808 = null;

    var res_33556842 = newSeq_33556825((s_33556807).length);
    var i_33556843 = 0;
    var j_33556844 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556843 < (s_33556807).length)) break Label2;
          var c_33556845 = s_33556807[i_33556843];
          if ((c_33556845 < 128)) {
          res_33556842[j_33556844] = String.fromCharCode(c_33556845);
          i_33556843 += 1;
          }
          else {
            var helper_33556857 = newSeq_33556825(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556858 = c_33556845.toString(16);
                  if ((((code_33556858) == null ? 0 : (code_33556858).length) == 1)) {
                  helper_33556857.push("%0");;
                  }
                  else {
                  helper_33556857.push("%");;
                  }
                  
                  helper_33556857.push(code_33556858);;
                  i_33556843 += 1;
                    if (((s_33556807).length <= i_33556843)) Temporary5 = true; else {                      Temporary5 = (s_33556807[i_33556843] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556845 = s_33556807[i_33556843];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556842[j_33556844] = decodeURIComponent(helper_33556857.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556842[j_33556844] = helper_33556857.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556844 += 1;
        }
    } while (false);
    if (res_33556842.length < j_33556844) { for (var i = res_33556842.length ; i < j_33556844 ; ++i) res_33556842.push(null); }
               else { res_33556842.length = j_33556844; };
    result_33556808 = res_33556842.join("");

  return result_33556808;

}

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}

function mnewString(len_33556893) {
        return new Array(len_33556893);
  

  
}
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var objectID_671088802 = [0];
import { h, render } from 'https://cdn.jsdelivr.net/npm/preact@10.11.3/+esm';
import htm from 'https://cdn.jsdelivr.net/npm/htm@3.1.1/+esm'
import { useState, useEffect, useMemo } from 'https://cdn.jsdelivr.net/npm/preact@10.11.3/hooks/+esm';
import {Router, Link} from 'https://cdn.jsdelivr.net/npm/preact-router@4.1.0/+esm';
import { signal, Signal } from 'https://cdn.jsdelivr.net/npm/@preact/signals@1.1.3/+esm';

const html = htm.bind(h);

// https://gist.github.com/developit/af2a4488de152a84bff83e035bb8afc1
Signal.prototype.map = function(fn) { return html`<For each=${this} children=${fn} />` };

export function For({ each, children: f }) {
  let c = useMemo(() => new Map, []);
  let value = each.value;
  if (!Array.isArray(value)) return html`<Item v=${value} f=${f} />`;
  return value.map((v, k, x) => c.get(v) || (c.set(v, x = html`<Item v=${v} k=${k} f=${f} />`), x));
}
let Item = ({ v, k, f }) => f(v, k);

export function Show({ when, fallback, children: f }) {
  let v = when.value;
  return v ? typeof f === 'function' ? html`<Item v=${v} f=${f} />` : f : fallback;
}

function renderApp(component, dom){
  render(html`<${component} />`, dom)
}


function FuncA() {
  var result_469762056 = null;

  BeforeRet: do {
    result_469762056 = eval('html`' + "<p>a</p>" + '`');
    break BeforeRet;
  } while (false);

  return result_469762056;

}

function isFatPointer_33557131(ti_33557132) {
  var result_33557133 = false;

  BeforeRet: do {
    result_33557133 = !((ConstSet1[ti_33557132.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557133;

}

function nimCopyAux(dest_33557144, src_33557145, n_33557146) {
    switch (n_33557146.kind) {
    case 0:
      break;
    case 1:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557146.sons.length; i++) {
      nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i]);
    }
    
      break;
    case 3:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
      for (var i = 0; i < n_33557146.sons.length; ++i) {
        nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i][1]);
      }
    
      break;
    }

  
}

function newSeq_33556825(len_33556827) {
  var result_33556828 = [];

    result_33556828 = new Array(len_33556827); for (var i = 0 ; i < len_33556827 ; ++i) { result_33556828[i] = null; }
  return result_33556828;

}

function getProcName_469762073() {
  var result_469762074 = null;

  BeforeRet: do {
    result_469762074 = (("${" + toJSStr(procNameHEX60gensym1_469762072)) + "}");
    break BeforeRet;
  } while (false);

  return result_469762074;

}

function add_33556419(x_33556420, x_33556420_Idx, y_33556421) {
          if (x_33556420[x_33556420_Idx] === null) { x_33556420[x_33556420_Idx] = []; }
      var off = x_33556420[x_33556420_Idx].length;
      x_33556420[x_33556420_Idx].length += y_33556421.length;
      for (var i = 0; i < y_33556421.length; ++i) {
        x_33556420[x_33556420_Idx][off+i] = y_33556421.charCodeAt(i);
      }
    

  
}

function getProcName_469762091() {
  var result_469762092 = null;

  BeforeRet: do {
    result_469762092 = (("${" + toJSStr(procNameHEX60gensym4_469762090)) + "}");
    break BeforeRet;
  } while (false);

  return result_469762092;

}

function getProcName_469762107() {
  var result_469762108 = null;

  BeforeRet: do {
    result_469762108 = (("${" + toJSStr(procNameHEX60gensym9_469762106)) + "}");
    break BeforeRet;
  } while (false);

  return result_469762108;

}
Label1: do {
  Label2: do {
  } while (false);
  var procNameHEX60gensym1_469762072 = nimCopy(null, makeNimstrLit("FuncA"), NTI33554439);
} while (false);
console.log(getProcName_469762073());
var fmtRes_469762083 = [mnewString(0)];
fmtRes_469762083[0].push.apply(fmtRes_469762083[0], makeNimstrLit("aaa "));;
Label3: do {
  Label4: do {
  } while (false);
  var procNameHEX60gensym4_469762090 = nimCopy(null, makeNimstrLit("FuncA"), NTI33554439);
} while (false);
add_33556419(fmtRes_469762083, 0, getProcName_469762091());
rawEcho(fmtRes_469762083[0]);
Label5: do {
  const fmt = (strings, ...values) => {
    return values.reduce((finalString, value, index) => {
      return `${finalString}${value}${strings[index + 1]}`}, strings[0]).slice(1, -1)
    };
  var fmtRes_469762104 = [mnewString(0)];
  fmtRes_469762104[0].push.apply(fmtRes_469762104[0], makeNimstrLit("aaa "));;
  Label6: do {
    Label7: do {
    } while (false);
    var procNameHEX60gensym9_469762106 = nimCopy(null, makeNimstrLit("FuncA"), NTI33554439);
  } while (false);
  add_33556419(fmtRes_469762104, 0, getProcName_469762107());
  rawEcho(fmtRes_469762104[0]);
} while (false);
